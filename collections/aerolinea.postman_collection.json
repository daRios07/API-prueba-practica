{
	"info": {
		"_postman_id": "9f3a96bd-ac3e-47ec-91c1-d8b34eb1d8f9",
		"name": "aerolinea",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37857984"
	},
	"item": [
		{
			"name": "create-Crear aerolinea",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()\r",
							"pm.globals.set(\"aerolineaId\", data.id);",
							"pm.test(\"Response status code is 201\", function () {",
							"    pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('nombre');",
							"    pm.expect(responseData).to.have.property('descripcion');",
							"    pm.expect(responseData).to.have.property('fechaFundacion');",
							"    pm.expect(responseData).to.have.property('paginaWeb');",
							"    pm.expect(responseData).to.have.property('id');",
							"});",
							"",
							"",
							"pm.test(\"FechaFundacion is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.fechaFundacion).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.id).to.be.a('number');",
							"    pm.expect(responseData.id).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nombre\": \"Aerolinea N1\",\r\n    \"descripcion\": \"american descripcion\",\r\n    \"fechaFundacion\": \"2024-06-01\",\r\n    \"paginaWeb\": \"www.american.com\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/airlines",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"airlines"
					]
				}
			},
			"response": []
		},
		{
			"name": "Crear una aerolÃ­nea invalida.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(400);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"descripcion\": \"american descripcion\",\r\n    \"fechaFundacion\": \"2024-06-01\",\r\n    \"paginaWeb\": \"www.american.com\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/airlines",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"airlines"
					]
				}
			},
			"response": []
		},
		{
			"name": "findAll-Obtener aerolineas",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    ",
							"    responseData.forEach(function(airline) {",
							"        pm.expect(airline).to.have.property('id');",
							"        pm.expect(airline).to.have.property('nombre');",
							"        pm.expect(airline).to.have.property('descripcion');",
							"        pm.expect(airline).to.have.property('fechaFundacion');",
							"        pm.expect(airline).to.have.property('paginaWeb');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/airlines",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"airlines"
					]
				}
			},
			"response": []
		},
		{
			"name": "findOne-Obtener aerolinea por aerolineaId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()",
							"pm.globals.set(\"aerolineaId\", data.id);",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('nombre');",
							"    pm.expect(responseData).to.have.property('descripcion');",
							"    pm.expect(responseData).to.have.property('fechaFundacion');",
							"    pm.expect(responseData).to.have.property('paginaWeb');",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.be.a('number').and.to.satisfy((id) => id >= 0, \"Id should be a non-negative integer\");",
							"});",
							"",
							"",
							"pm.test(\"Nombre, descripcion, and paginaWeb are non-empty strings\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.nombre).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"  pm.expect(responseData.descripcion).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"  pm.expect(responseData.paginaWeb).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/airlines/{{aerolineaId}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"airlines",
						"{{aerolineaId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "findOne-Obtener aerolinea por ID no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/airlines/999",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"airlines",
						"999"
					]
				}
			},
			"response": []
		},
		{
			"name": "update-Actualizar aerolinea por aerolineaId",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()",
							"pm.globals.set(\"aerolineaId\", data.id);",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Id field should exist and be a number\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
							"});",
							"",
							"",
							"pm.test(\"Nombre, descripcion, fechaFundacion, and paginaWeb fields are present and non-empty\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.nombre).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"  pm.expect(responseData.descripcion).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"  pm.expect(responseData.fechaFundacion).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"  pm.expect(responseData.paginaWeb).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nombre\": \"American modificado 333\",\r\n    \"descripcion\": \"american descripcion\",\r\n    \"fechaFundacion\": \"2024/06/01\",\r\n    \"paginaWeb\": \"www.american.com\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/airlines/{{aerolineaId}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"airlines",
						"{{aerolineaId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update-Actualizar aerolinea por ID no existe",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 404\", function () {",
							"    pm.expect(pm.response.code).to.equal(404);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nombre\": \"American modificado 333\",\r\n    \"descripcion\": \"american descripcion\",\r\n    \"fechaFundacion\": \"2024/06/01\",\r\n    \"paginaWeb\": \"www.american.com\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/airlines/9999",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"airlines",
						"9999"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete-Eliminar aerolinea por aerolineaId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 204\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(204);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/airlines/{{aerolineaId}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"airlines",
						"{{aerolineaId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete-Eliminar aerolinea por ID no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(404);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/airlines/999",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"airlines",
						"999"
					]
				}
			},
			"response": []
		}
	]
}